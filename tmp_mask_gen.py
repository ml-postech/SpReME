import torch


def mask_gen(args, type):
    if args.data_type == "3d":
        mask = torch.zeros(56, 3)
        if type == 1:
            ####3d perfect mask###
            mask[1, 0] = 1.0
            mask[1, 1] = 1.0
            mask[2, 0] = 1.0
            mask[2, 1] = 1.0
            mask[3, 2] = 1.0
        elif type == 2:
            ####3d good precision###
            mask[1, 0] = 1.0
            mask[1, 1] = 1.0
            mask[2, 1] = 1.0
        elif type == 3:
            ####3d good recall###
            mask = [
                [0.0000e00, 0.0000e00, 0.0000e00],
                [2.7080e-01, 1.0000e00, 0.0000e00],
                [1.0000e00, 3.3894e-01, 0.0000e00],
                [0.0000e00, 0.0000e00, 6.3765e-01],
                [0.0000e00, 0.0000e00, 0.0000e00],
                [0.0000e00, 0.0000e00, 0.0000e00],
                [0.0000e00, 1.0000e00, 0.0000e00],
                [0.0000e00, 0.0000e00, 0.0000e00],
                [1.0000e00, 0.0000e00, 0.0000e00],
                [0.0000e00, 0.0000e00, 0.0000e00],
                [0.0000e00, 1.0000e00, 0.0000e00],
                [1.0000e00, 0.0000e00, 0.0000e00],
                [0.0000e00, 0.0000e00, 0.0000e00],
                [0.0000e00, 1.0000e00, 0.0000e00],
                [0.0000e00, 0.0000e00, 0.0000e00],
                [0.0000e00, 0.0000e00, 0.0000e00],
                [1.0000e00, 0.0000e00, 0.0000e00],
                [0.0000e00, 0.0000e00, 0.0000e00],
                [0.0000e00, 0.0000e00, 0.0000e00],
                [0.0000e00, 0.0000e00, 0.0000e00],
                [0.0000e00, 0.0000e00, 0.0000e00],
                [0.0000e00, 0.0000e00, 0.0000e00],
                [0.0000e00, 0.0000e00, 0.0000e00],
                [0.0000e00, 0.0000e00, 0.0000e00],
                [0.0000e00, 0.0000e00, 0.0000e00],
                [0.0000e00, 0.0000e00, 0.0000e00],
                [0.0000e00, 0.0000e00, 0.0000e00],
                [0.0000e00, 0.0000e00, 0.0000e00],
                [0.0000e00, 0.0000e00, 0.0000e00],
                [0.0000e00, 4.5143e-02, 0.0000e00],
                [0.0000e00, 0.0000e00, 0.0000e00],
                [0.0000e00, 0.0000e00, 0.0000e00],
                [0.0000e00, 0.0000e00, 0.0000e00],
                [6.1540e-02, 0.0000e00, 0.0000e00],
                [0.0000e00, 0.0000e00, 0.0000e00],
                [0.0000e00, 5.5254e-04, 0.0000e00],
                [0.0000e00, 0.0000e00, 0.0000e00],
                [0.0000e00, 0.0000e00, 0.0000e00],
                [0.0000e00, 0.0000e00, 0.0000e00],
                [0.0000e00, 0.0000e00, 0.0000e00],
                [0.0000e00, 0.0000e00, 0.0000e00],
                [0.0000e00, 0.0000e00, 0.0000e00],
                [0.0000e00, 0.0000e00, 0.0000e00],
                [0.0000e00, 0.0000e00, 0.0000e00],
                [0.0000e00, 0.0000e00, 0.0000e00],
                [0.0000e00, 0.0000e00, 0.0000e00],
                [0.0000e00, 0.0000e00, 0.0000e00],
                [0.0000e00, 0.0000e00, 0.0000e00],
                [0.0000e00, 0.0000e00, 0.0000e00],
                [0.0000e00, 0.0000e00, 0.0000e00],
                [0.0000e00, 0.0000e00, 0.0000e00],
                [0.0000e00, 0.0000e00, 0.0000e00],
                [0.0000e00, 0.0000e00, 0.0000e00],
                [0.0000e00, 0.0000e00, 0.0000e00],
                [0.0000e00, 0.0000e00, 0.0000e00],
                [0.0000e00, 0.0000e00, 0.0000e00],
            ]
            mask = (torch.tensor(mask) != 0.0).float()

    elif args.data_type == "lorenz":
        mask = torch.zeros(56, 3)
        if type == 1:
            ####lorenz perfect mask###
            mask[1, 0] = 1.0
            mask[1, 1] = 1.0
            mask[2, 0] = 1.0
            mask[2, 1] = 1.0
            mask[3, 2] = 1.0
            mask[6, 1] = 1.0
            mask[5, 2] = 1.0
        elif type == 2:
            ####lorenz good precision###
            mask[1, 1] = 1.0
            mask[2, 0] = 1.0
            mask[2, 1] = 1.0
            mask[5, 2] = 1.0
        elif type == 3:
            ####lorenz good recall###
            mask = [[0., 0., 0.],
                    [1., 1., 0.],
                    [1., 1., 0.],
                    [0., 0., 1.],
                    [0., 0., 0.],
                    [0., 0., 1.],
                    [0., 1., 0.],
                    [0., 0., 0.],
                    [0., 0., 0.],
                    [0., 0., 0.],
                    [0., 1., 0.],
                    [0., 0., 0.],
                    [0., 0., 0.],
                    [0., 0., 0.],
                    [0., 0., 0.],
                    [0., 1., 0.],
                    [0., 0., 0.],
                    [0., 0., 0.],
                    [0., 0., 0.],
                    [0., 0., 0.],
                    [0., 0., 0.],
                    [0., 0., 0.],
                    [0., 0., 0.],
                    [0., 0., 0.],
                    [0., 0., 0.],
                    [0., 0., 0.],
                    [0., 0., 0.],
                    [0., 0., 0.],
                    [0., 0., 0.],
                    [0., 1., 0.],
                    [0., 0., 0.],
                    [0., 0., 0.],
                    [0., 0., 0.],
                    [0., 0., 0.],
                    [0., 0., 0.],
                    [0., 0., 0.],
                    [0., 0., 0.],
                    [0., 0., 0.],
                    [0., 0., 0.],
                    [0., 0., 0.],
                    [0., 0., 0.],
                    [0., 0., 0.],
                    [0., 0., 0.],
                    [0., 0., 0.],
                    [0., 0., 0.],
                    [0., 0., 0.],
                    [0., 0., 0.],
                    [0., 0., 0.],
                    [0., 0., 0.],
                    [0., 0., 0.],
                    [0., 0., 0.],
                    [0., 0., 0.],
                    [0., 0., 0.],
                    [0., 0., 0.],
                    [0., 0., 0.],
                    [0., 0., 0.]]
            mask = (torch.tensor(mask) != 0.0).float()
    elif args.data_type == "lotka":
        mask = torch.zeros(21, 2)
        if type == 1:
            mask[1, 0] = 1.0
            mask[2, 1] = 1.0
            mask[4, 0] = 1.0
            mask[4, 1] = 1.0
        elif type==3:
            mask = [[0., 0.],
                    [1., 0.],
                    [0., 1.],
                    [1., 0.],
                    [1., 1.],
                    [0., 0.],
                    [0., 0.],
                    [1., 0.],
                    [1., 0.],
                    [0., 0.],
                    [0., 0.],
                    [0., 0.],
                    [0., 0.],
                    [0., 0.],
                    [0., 0.],
                    [0., 0.],
                    [0., 0.],
                    [0., 0.],
                    [0., 0.],
                    [0., 0.],
                    [0., 0.]]
            mask = (torch.tensor(mask) != 0.0).float()
        else:
            raise NotImplementedError

    elif args.data_type == "pendulum":
        mask = torch.zeros(24, 2)
        if type == 1:
            mask[2, 0] = 1.0
            mask[2, 1] = 1.0
            mask[-3, 1] = 1.0
        elif type == 3:
            ####pendulum good recall###
            mask = [
                [0.0, 0.0],
                [0.0, 1.0],
                [1.0, 1.0],
                [0.0, 0.0],
                [0.0, 0.0],
                [0.0, 0.0],
                [0.0, 0.0],
                [0.0, 0.0],
                [0.0, 0.0],
                [0.0, 0.0],
                [0.0, 0.0],
                [0.0, 0.0],
                [0.0, 0.0],
                [0.0, 0.0],
                [0.0, 0.0],
                [0.0, 0.0],
                [0.0, 0.0],
                [0.0, 0.0],
                [0.0, 0.0],
                [0.0, 0.0],
                [0.0, 0.0],
                [0.0, 1.0],
                [0.0, 0.0],
                [0.0, 0.0],
            ]
            mask = (torch.tensor(mask) != 0.0).float()
        else:
            raise NotImplementedError
    else:
        raise NotImplementedError

    return mask
